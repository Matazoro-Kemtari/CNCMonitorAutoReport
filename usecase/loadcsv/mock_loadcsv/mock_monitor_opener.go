// Code generated by MockGen. DO NOT EDIT.
// Source: monitor_opener.go

// Package mock_loadcsv is a generated GoMock package.
package mock_loadcsv

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMonitorOpener is a mock of MonitorOpener interface.
type MockMonitorOpener struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorOpenerMockRecorder
}

// MockMonitorOpenerMockRecorder is the mock recorder for MockMonitorOpener.
type MockMonitorOpenerMockRecorder struct {
	mock *MockMonitorOpener
}

// NewMockMonitorOpener creates a new mock instance.
func NewMockMonitorOpener(ctrl *gomock.Controller) *MockMonitorOpener {
	mock := &MockMonitorOpener{ctrl: ctrl}
	mock.recorder = &MockMonitorOpenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitorOpener) EXPECT() *MockMonitorOpenerMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockMonitorOpener) Open(p string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", p)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockMonitorOpenerMockRecorder) Open(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockMonitorOpener)(nil).Open), p)
}
