// Code generated by MockGen. DO NOT EDIT.
// Source: loader.go

// Package mock_cncmonitor is a generated GoMock package.
package mock_cncmonitor

import (
	cncmonitor "CNCMonitorAutoReport/domain/cncmonitor"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockLoader) Load(r io.Reader, mon cncmonitor.PickingCNCMonitor) (cncmonitor.CNCMonitorByMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", r, mon)
	ret0, _ := ret[0].(cncmonitor.CNCMonitorByMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockLoaderMockRecorder) Load(r, mon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockLoader)(nil).Load), r, mon)
}
